// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id Int @id @default(autoincrement())
  firstName String @db.VarChar(50)
  lastName String @db.VarChar(50)
  email String @unique @db.VarChar(50)
  password String @db.VarChar(50)
  otp String @db.VarChar(10)
  comments comments[]
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model comments {
  id Int @id @default(autoincrement())
  description String @db.VarChar(1000)
  userId Int
  newsId Int
  users users @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  newsList newsList @relation(fields: [newsId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model newsList {
  id Int @id @default(autoincrement())
  title String @db.VarChar(100)
  shortDescription String @db.VarChar(400)
  longDescription String @db.LongText
  image1 String @db.VarChar(300)
  image2 String @db.VarChar(300)
  image3 String @db.VarChar(300)
  image4 String @db.VarChar(300)
  keywords String @db.VarChar(300)
  type String @db.VarChar(200)
  categoryId Int
  comments comments[]
  categories categories @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model categories {
  id Int @id @default(autoincrement())
  name String @db.VarChar(100) @unique 
  newsList newsList[]
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model socials {
  id Int @id @default(autoincrement())
  facebook String @db.VarChar(200)
  youtube String @db.VarChar(200)
  twitter String @db.VarChar(200)
  linkedin String @db.VarChar(200)
  about String @db.Text
  address String @db.Text
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model subscribers {
  id Int @id @default(autoincrement())
  email String @db.VarChar(100) @unique
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

model policies {
  id Int @id @default(autoincrement())
  description String @db.LongText
  type String @db.VarChar(50)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}